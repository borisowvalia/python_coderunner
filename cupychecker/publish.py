#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ cupychecker —á–µ—Ä–µ–∑ twine
"""
import os
import sys
import subprocess
import shutil
from pathlib import Path
import argparse
import re
from datetime import datetime


class PackagePublisher:
    def __init__(self):
        self.package_dir = Path(__file__).parent
        self.dist_dir = self.package_dir / "dist"
        self.setup_cfg = self.package_dir / "setup.cfg"
        self.readme = self.package_dir / "README.md"
        
    def run_command(self, cmd, check=True, capture_output=False):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print(f"üîÑ –í—ã–ø–æ–ª–Ω—è—é: {' '.join(cmd)}")
        try:
            result = subprocess.run(
                cmd, 
                check=check, 
                capture_output=capture_output, 
                text=True,
                cwd=self.package_dir
            )
            if capture_output:
                return result.stdout.strip()
            return result
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            if e.stdout:
                print(f"STDOUT: {e.stdout}")
            if e.stderr:
                print(f"STDERR: {e.stderr}")
            sys.exit(1)
    
    def get_current_version(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ setup.cfg"""
        if not self.setup_cfg.exists():
            print("‚ùå –§–∞–π–ª setup.cfg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
            
        with open(self.setup_cfg, 'r', encoding='utf-8') as f:
            content = f.read()
            
        match = re.search(r'version\s*=\s*([^\s\n]+)', content)
        if not match:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é –≤ setup.cfg")
            sys.exit(1)
            
        return match.group(1)
    
    def update_version(self, new_version):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é –≤ setup.cfg"""
        print(f"üìù –û–±–Ω–æ–≤–ª—è—é –≤–µ—Ä—Å–∏—é –¥–æ {new_version}")
        
        with open(self.setup_cfg, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        new_content = re.sub(
            r'version\s*=\s*[^\s\n]+',
            f'version = {new_version}',
            content
        )
        
        with open(self.setup_cfg, 'w', encoding='utf-8') as f:
            f.write(new_content)
            
        print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_version}")
    
    def increment_version(self, version_type='patch'):
        """–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Ä—Å–∏—é (patch, minor, major)"""
        current_version = self.get_current_version()
        print(f"üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
        
        try:
            major, minor, patch = map(int, current_version.split('.'))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è X.Y.Z")
            sys.exit(1)
        
        if version_type == 'major':
            major += 1
            minor = 0
            patch = 0
        elif version_type == 'minor':
            minor += 1
            patch = 0
        elif version_type == 'patch':
            patch += 1
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤–µ—Ä—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: major, minor, patch")
            sys.exit(1)
        
        new_version = f"{major}.{minor}.{patch}"
        return new_version
    
    def clean_build(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏"""
        print("üßπ –û—á–∏—â–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏...")
        
        # –£–¥–∞–ª—è–µ–º dist –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if self.dist_dir.exists():
            shutil.rmtree(self.dist_dir)
            print("‚úÖ –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist/")
        
        # –£–¥–∞–ª—è–µ–º egg-info
        egg_info_dirs = list(self.package_dir.glob("*.egg-info"))
        for egg_info in egg_info_dirs:
            shutil.rmtree(egg_info)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ {egg_info.name}/")
        
        # –£–¥–∞–ª—è–µ–º __pycache__
        for pycache in self.package_dir.rglob("__pycache__"):
            shutil.rmtree(pycache)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω {pycache}")
    
    def run_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π"""
        print("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã...")
        
        tests_dir = self.package_dir.parent / "tests"
        if not tests_dir.exists():
            print("‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è tests –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        result = self.run_command(
            ["python3", "../tests/run_tests.py"],
            check=False,
            capture_output=True
        )
        
        if "‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!" in result:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
            print(result)
            sys.exit(1)
    
    def build_package(self):
        """–°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç"""
        print("üî® –°–æ–±–∏—Ä–∞—é –ø–∞–∫–µ—Ç...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º build –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.run_command([
            "pip3", "install", "--upgrade", 
            "setuptools", "wheel", "build"
        ])
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç
        self.run_command(["python3", "-m", "build"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
        if not self.dist_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist/ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            sys.exit(1)
        
        files = list(self.dist_dir.glob("*"))
        if not files:
            print("‚ùå –§–∞–π–ª—ã –ø–∞–∫–µ—Ç–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            sys.exit(1)
        
        print("‚úÖ –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        for file in files:
            print(f"   üì¶ {file.name}")
    
    def check_package(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–∫–µ—Ç —Å –ø–æ–º–æ—â—å—é twine"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–∞–∫–µ—Ç...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º twine –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.run_command([
            "pip3", "install", "--upgrade", "twine"
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç
        self.run_command([
            "python3", "-m", "twine", "check", "dist/*"
        ])
        
        print("‚úÖ –ü–∞–∫–µ—Ç –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!")
    
    def upload_to_testpypi(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ TestPyPI"""
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ TestPyPI...")
        
        self.run_command([
            "python3", "-m", "twine", "upload", 
            "--repository", "testpypi",
            "dist/*"
        ])
        
        print("‚úÖ –ü–∞–∫–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ TestPyPI!")
        print("üîó https://test.pypi.org/project/cupychecker/")
    
    def upload_to_pypi(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ PyPI"""
        print("üöÄ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞ PyPI...")
        
        self.run_command([
            "python3", "-m", "twine", "upload", 
            "dist/*"
        ])
        
        print("‚úÖ –ü–∞–∫–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ PyPI!")
        print("üîó https://pypi.org/project/cupychecker/")
    
    def create_git_tag(self, version):
        """–°–æ–∑–¥–∞—Ç—å git —Ç–µ–≥ –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
        print(f"üè∑Ô∏è  –°–æ–∑–¥–∞—é git —Ç–µ–≥ v{version}...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            self.run_command(["git", "status"], capture_output=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.run_command(["git", "add", "."])
            
            # –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.run_command([
                "git", "commit", 
                "-m", f"Release version {version}"
            ])
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–≥
            self.run_command([
                "git", "tag", 
                "-a", f"v{version}", 
                "-m", f"Release version {version}"
            ])
            
            print(f"‚úÖ Git —Ç–µ–≥ v{version} —Å–æ–∑–¥–∞–Ω!")
            
        except subprocess.CalledProcessError:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å git —Ç–µ–≥ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)")
    
    def publish(self, version_type='patch', test_only=False, skip_tests=False, 
                skip_git=False, version=None):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–∞–∫–µ—Ç–∞ cupychecker")
        print("=" * 50)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        if version:
            new_version = version
        else:
            new_version = self.increment_version(version_type)
        
        print(f"üì¶ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: {new_version}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        self.update_version(new_version)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        if not skip_tests:
            self.run_tests()
        else:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã (--skip-tests)")
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏
        self.clean_build()
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç
        self.build_package()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç
        self.check_package()
        
        # –°–æ–∑–¥–∞–µ–º git —Ç–µ–≥
        if not skip_git:
            self.create_git_tag(new_version)
        else:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞ (--skip-git)")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–∫–µ—Ç
        if test_only:
            self.upload_to_testpypi()
        else:
            self.upload_to_pypi()
        
        print("\nüéâ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üì¶ –í–µ—Ä—Å–∏—è: {new_version}")
        if test_only:
            print("üîó TestPyPI: https://test.pypi.org/project/cupychecker/")
        else:
            print("üîó PyPI: https://pypi.org/project/cupychecker/")


def main():
    parser = argparse.ArgumentParser(
        description="–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ cupychecker"
    )
    
    parser.add_argument(
        '--version-type', 
        choices=['major', 'minor', 'patch'], 
        default='patch',
        help='–¢–∏–ø —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: patch)'
    )
    
    parser.add_argument(
        '--version',
        help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2.3)'
    )
    
    parser.add_argument(
        '--test-only',
        action='store_true',
        help='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ TestPyPI'
    )
    
    parser.add_argument(
        '--skip-tests',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã'
    )
    
    parser.add_argument(
        '--skip-git',
        action='store_true',
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ git —Ç–µ–≥–∞'
    )
    
    parser.add_argument(
        '--clean-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏'
    )
    
    parser.add_argument(
        '--build-only',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ —Å–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç'
    )
    
    args = parser.parse_args()
    
    publisher = PackagePublisher()
    
    if args.clean_only:
        publisher.clean_build()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    
    if args.build_only:
        publisher.clean_build()
        publisher.build_package()
        publisher.check_package()
        print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return
    
    publisher.publish(
        version_type=args.version_type,
        test_only=args.test_only,
        skip_tests=args.skip_tests,
        skip_git=args.skip_git,
        version=args.version
    )


if __name__ == "__main__":
    main()
