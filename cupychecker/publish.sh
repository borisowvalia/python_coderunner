#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ cupychecker

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${GREEN}üöÄ –°–∫—Ä–∏–ø—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞–∫–µ—Ç–∞ cupychecker${NC}"
    echo "=================================================="
    echo -e "${YELLOW}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${NC}"
    echo "  ./publish.sh [–∫–æ–º–∞–Ω–¥–∞] [–æ–ø—Ü–∏–∏]"
    echo ""
    echo -e "${YELLOW}–ö–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  help              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  setup             - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  test              - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã"
    echo "  build             - –°–æ–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç"
    echo "  clean             - –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–±–æ—Ä–∫–∏"
    echo "  check             - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–∫–µ—Ç"
    echo "  publish           - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å patch –≤–µ—Ä—Å–∏—é"
    echo "  publish-patch     - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å patch –≤–µ—Ä—Å–∏—é (0.1.0 -> 0.1.1)"
    echo "  publish-minor     - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å minor –≤–µ—Ä—Å–∏—é (0.1.0 -> 0.2.0)"
    echo "  publish-major     - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å major –≤–µ—Ä—Å–∏—é (0.1.0 -> 1.0.0)"
    echo "  publish-test      - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ TestPyPI"
    echo "  publish-version   - –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é"
    echo "  dev               - –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (—Ç–µ—Å—Ç + —Å–±–æ—Ä–∫–∞)"
    echo ""
    echo -e "${YELLOW}–ü—Ä–∏–º–µ—Ä—ã:${NC}"
    echo "  ./publish.sh publish"
    echo "  ./publish.sh publish-minor"
    echo "  ./publish.sh publish-test"
    echo "  ./publish.sh publish-version 1.2.3"
    echo "  ./publish.sh dev"
    echo ""
    echo -e "${YELLOW}–ê–ª–∏–∞—Å—ã:${NC}"
    echo "  p                 - publish"
    echo "  pt                - publish-test"
    echo "  pp                - publish-patch"
    echo "  pm                - publish-minor"
    echo "  pmj               - publish-major"
    echo "  pv                - publish-version"
    echo "  t                 - test"
    echo "  b                 - build"
    echo "  c                 - clean"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_env() {
    echo -e "${GREEN}üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...${NC}"
    pip3 install --upgrade setuptools wheel build twine
    pip3 install -e .
    pip3 install -r ../tests/requirements-test.txt
    echo -e "${GREEN}‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    echo -e "${GREEN}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...${NC}"
    cd ../tests && python3 run_tests.py
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞
build_package() {
    echo -e "${GREEN}üî® –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...${NC}"
    python3 publish.py --build-only
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
clean_build() {
    echo -e "${GREEN}üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫...${NC}"
    python3 publish.py --clean-only
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞
check_package() {
    echo -e "${GREEN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞...${NC}"
    python3 -m twine check dist/*
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
publish_package() {
    local version_type=${1:-"patch"}
    local test_only=${2:-false}
    local version=${3:-""}
    
    echo -e "${GREEN}üöÄ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞...${NC}"
    
    if [ -n "$version" ]; then
        python3 publish.py --version "$version"
    elif [ "$test_only" = true ]; then
        python3 publish.py --test-only
    else
        python3 publish.py --version-type "$version_type"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev_workflow() {
    echo -e "${GREEN}‚ö° –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞...${NC}"
    run_tests
    build_package
    check_package
    echo -e "${GREEN}‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–∞–∫–µ—Ç —Å–æ–±—Ä–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω.${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
show_version() {
    echo -e "${GREEN}üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:${NC}"
    python3 -c "import re; content=open('setup.cfg').read(); print(re.search(r'version\s*=\s*([^\s\n]+)', content).group(1))"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∞–π–ª–æ–≤ –≤ dist
show_files() {
    echo -e "${GREEN}üìÅ –§–∞–π–ª—ã –≤ dist/:${NC}"
    if [ -d "dist" ]; then
        ls -la dist/
    else
        echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist/ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "help"|"-h"|"--help")
        show_help
        ;;
    "setup")
        setup_env
        ;;
    "test"|"t")
        run_tests
        ;;
    "build"|"b")
        build_package
        ;;
    "clean"|"c")
        clean_build
        ;;
    "check")
        check_package
        ;;
    "publish"|"p")
        publish_package "patch" false
        ;;
    "publish-patch"|"pp")
        publish_package "patch" false
        ;;
    "publish-minor"|"pm")
        publish_package "minor" false
        ;;
    "publish-major"|"pmj")
        publish_package "major" false
        ;;
    "publish-test"|"pt")
        publish_package "patch" true
        ;;
    "publish-version"|"pv")
        if [ -z "$2" ]; then
            echo -e "${RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é: ./publish.sh publish-version 1.2.3${NC}"
            exit 1
        fi
        publish_package "patch" false "$2"
        ;;
    "dev")
        dev_workflow
        ;;
    "version")
        show_version
        ;;
    "files")
        show_files
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
