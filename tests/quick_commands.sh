#!/bin/bash
# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cupychecker

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cupychecker${NC}"
echo "=================================================="

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo -e "${YELLOW}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
    echo "  ./quick_commands.sh help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  ./quick_commands.sh install  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "  ./quick_commands.sh test     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"
    echo "  ./quick_commands.sh helpers  - –¢–µ—Å—Ç—ã helpers"
    echo "  ./quick_commands.sh checker  - –¢–µ—Å—Ç—ã checker"
    echo "  ./quick_commands.sh fast     - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  ./quick_commands.sh coverage - –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º"
    echo "  ./quick_commands.sh watch    - –¢–µ—Å—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"
    echo "  ./quick_commands.sh example  - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã"
    echo "  ./quick_commands.sh clean    - –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    echo ""
    echo -e "${YELLOW}–ê–ª–∏–∞—Å—ã:${NC}"
    echo "  ./quick_commands.sh t        - test"
    echo "  ./quick_commands.sh h        - helpers"
    echo "  ./quick_commands.sh c        - checker"
    echo "  ./quick_commands.sh f        - fast"
    echo "  ./quick_commands.sh cov      - coverage"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_deps() {
    echo -e "${GREEN}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...${NC}"
    pip install -r requirements-test.txt
    echo -e "${GREEN}‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    local test_type=${1:-"all"}
    echo -e "${GREEN}üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${test_type}${NC}"
    python3 run_tests.py "$test_type"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤
run_examples() {
    echo -e "${GREEN}üìö –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤...${NC}"
    python3 example_usage.py
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
clean_files() {
    echo -e "${GREEN}üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...${NC}"
    rm -rf __pycache__/
    rm -rf .pytest_cache/
    rm -rf htmlcov/
    rm -rf .coverage
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    find . -type f -name "*.pyc" -delete 2>/dev/null || true
    echo -e "${GREEN}‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
watch_tests() {
    echo -e "${GREEN}üëÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è...${NC}"
    if command -v ptw >/dev/null 2>&1; then
        ptw --runner "python run_tests.py"
    else
        echo -e "${RED}‚ùå pytest-watch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytest-watch${NC}"
        echo -e "${YELLOW}–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'make test-watch'${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
case "${1:-help}" in
    "help"|"-h"|"--help")
        show_help
        ;;
    "install"|"i")
        install_deps
        ;;
    "test"|"t")
        run_tests "all"
        ;;
    "helpers")
        run_tests "helpers"
        ;;
    "checker"|"c")
        run_tests "checker"
        ;;
    "fast"|"f")
        run_tests "fast"
        ;;
    "coverage"|"cov")
        run_tests "coverage"
        ;;
    "watch"|"w")
        watch_tests
        ;;
    "example"|"e")
        run_examples
        ;;
    "clean"|"cl")
        clean_files
        ;;
    "h")
        # –ê–ª–∏–∞—Å –¥–ª—è helpers
        run_tests "helpers"
        ;;
    *)
        echo -e "${RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
