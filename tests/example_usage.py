#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ cupychecker –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'cupychecker'))

from cupychecker.helpers import TestHelper


def example_development_workflow():
    """–ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏"""
    
    print("üîß –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏")
    print("=" * 60)
    
    # 1. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∏—à–µ—Ç –∫–æ–¥
    student_code = """
x = 10
y = "hello"
print(f"x = {x}, y = {y}")
"""
    
    print("1. –ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞:")
    print(student_code)
    
    # 2. –°–æ–∑–¥–∞–µ–º TestHelper –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    helper = TestHelper(student_code, "x = 10, y = hello")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:")
    var_x_result = helper.var("x", 10)
    var_y_result = helper.var("y", "hello")
    
    print(f"   x = 10: {var_x_result}")
    print(f"   y = 'hello': {var_y_result}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏:")
    call_result = helper.call("print")
    print(f"   print() –≤—ã–∑–≤–∞–Ω: {call_result}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–≤–æ–¥
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–≤–æ–¥–∞:")
    output_result = helper.output("x = 10, y = hello")
    print(f"   –í—ã–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {output_result}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–¥–∞
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–¥–∞:")
    contains_result = helper.contains("f\"x = {x}")
    print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç f-—Å—Ç—Ä–æ–∫—É: {contains_result}")
    
    # 7. –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    all_checks = [var_x_result, var_y_result, call_result, output_result, contains_result]
    all_passed = all(check is True for check in all_checks)
    
    print(f"\n6. –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò' if all_passed else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    
    return all_passed


def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    print("\n\nüö® –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    print("=" * 60)
    
    # –ö–æ–¥ —Å –æ—à–∏–±–∫–∞–º–∏
    problematic_code = """
x = 5  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10
y = "world"  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å "hello"
print(x)  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å print(y)
"""
    
    print("1. –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥:")
    print(problematic_code)
    
    helper = TestHelper(problematic_code, "5")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    print("\n2. –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:")
    
    var_x_result = helper.var("x", 10)
    if var_x_result is not True:
        print(f"   ‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è x: {var_x_result}")
    
    var_y_result = helper.var("y", "hello")
    if var_y_result is not True:
        print(f"   ‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è y: {var_y_result}")
    
    call_result = helper.call("print", ["y"])
    if call_result is not True:
        print(f"   ‚ùå –í—ã–∑–æ–≤ print(y): {call_result}")
    
    output_result = helper.output("hello")
    if output_result is not True:
        print(f"   ‚ùå –í—ã–≤–æ–¥ 'hello': {output_result}")


def example_quick_test():
    """–ü—Ä–∏–º–µ—Ä –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("\n\n‚ö° –ü—Ä–∏–º–µ—Ä –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
    new_code = "result = 2 + 3 * 4"
    helper = TestHelper(new_code, "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ
    result = helper.var("result", 14)  # 2 + 3 * 4 = 14
    print(f"–ö–æ–¥: {new_code}")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    if result is True:
        print("‚úÖ –ö–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result}")


if __name__ == "__main__":
    print("üß™ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ cupychecker")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    example_development_workflow()
    example_error_handling()
    example_quick_test()
    
    print("\n\nüìö –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python run_tests.py")
    print("   make test")
    print("   pytest")
